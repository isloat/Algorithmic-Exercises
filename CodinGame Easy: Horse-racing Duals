import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int numberHorses = in.nextInt();
        
        int[] horsePower = new int[numberHorses];
        
        for (int i = 0; i < numberHorses; i++) {
            horsePower[i] = in.nextInt();
            System.err.println(horsePower[i]);
        }
        
        int powerDifference = 10000001; // Set solution to out-of-bounds for later error-checking
        
        // Naively an O(N^2) algorithm. For each variable, search the list and compare, store the smallest difference
        // O(N^2) is inefficient, though, and quickly breaks down for large lists
        // We can reduce the time by taking the list, sorting it, and then checking adjacent pairs for smallest difference
        // This should reduce the algorithm to O(N log N) time
        
        // First, sort the array
        Arrays.sort(horsePower);
        
        // Now check adjacent pairs
        for (int i = 0; i < (numberHorses - 1); i++) {
            int firstHorse = horsePower[i];
            int secondHorse = horsePower[i + 1];
            int horseDifference = Math.abs(firstHorse - secondHorse);
            
            if (horseDifference < powerDifference) powerDifference = horseDifference;
        }

        if (powerDifference == 10000001) {
            System.out.println("There was an error.");
        } else {
            System.out.println(powerDifference);
        }
    }
}
